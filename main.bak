package main

import (
	"fmt"
	"log"
	"os"

	"github.com/gofiber/fiber/v2"
	"github.com/joho/godotenv"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

var db *gorm.DB

func initDatabase() {

	// Load .env file
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	// Build the DSN string using environment variables
	dsn := fmt.Sprintf(
		"host=%s user=%s password=%s dbname=%s port=%s sslmode=%s TimeZone=%s",
		os.Getenv("DB_HOST"),
		os.Getenv("DB_USER"),
		os.Getenv("DB_PASSWORD"),
		os.Getenv("DB_NAME"),
		os.Getenv("DB_PORT"),
		os.Getenv("DB_SSLMODE"),
		os.Getenv("DB_TIMEZONE"),
	)

	db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatal("Failed to connect to database")
	}

	db.AutoMigrate(&Expediente{})
}

func main() {
	// Initialize Fiber app
	app := fiber.New()

	// Initialize the database
	initDatabase()

	// Routes
	app.Get("/expedientes", getUsers)
	app.Get("/expedientes/:id", getUser)
	app.Post("/expedientes", createUser)
	app.Put("/expedientes/:id", updateUser)
	app.Delete("/expedientes/:id", deleteUser)

	// Start server
	log.Fatal(app.Listen(":3000"))
}

func getUsers(c *fiber.Ctx) error {
	var expedientes []Expediente
	db.Find(&expedientes)
	return c.JSON(expedientes)
}

func getUser(c *fiber.Ctx) error {
	id := c.Params("id")
	var expediente Expediente
	result := db.First(&expediente, id)
	if result.Error != nil {
		return c.Status(404).JSON(fiber.Map{"error": "Expediente not found"})
	}
	return c.JSON(expediente)
}

func createUser(c *fiber.Ctx) error {
	var expediente Expediente
	if err := c.BodyParser(&expediente); err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "Cannot parse JSON"})
	}
	db.Create(&expediente)
	return c.JSON(expediente)
}

func updateUser(c *fiber.Ctx) error {
	id := c.Params("id")
	var expediente Expediente
	result := db.First(&expediente, id)
	if result.Error != nil {
		return c.Status(404).JSON(fiber.Map{"error": "Expediente not found"})
	}

	if err := c.BodyParser(&expediente); err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "Cannot parse JSON"})
	}
	db.Save(&expediente)
	return c.JSON(expediente)
}

func deleteUser(c *fiber.Ctx) error {
	id := c.Params("id")
	var expediente Expediente
	result := db.First(&expediente, id)
	if result.Error != nil {
		return c.Status(404).JSON(fiber.Map{"error": "Expediente not found"})
	}
	db.Delete(&expediente)
	return c.SendStatus(204)
}
